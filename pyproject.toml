[tool.poetry]
name = "tap-jquants"
version = "0.4.2"
description = "`tap-jquants` is a Singer tap for JQuants, built with the Meltano Singer SDK."
readme = "README.md"
authors = ["Akira Ishino"]
keywords = [
    "ELT",
    "JQuants",
]
license = "Apache 2.0"

[tool.poetry.dependencies]
python = "<3.12,>=3.7.1"
singer-sdk = { version="^0.31.0" }
fs-s3fs = { version = "^1.1.1", optional = true }
requests = "^2.31.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.2.1"
singer-sdk = { version="^0.31.0", extras = ["testing"] }

[tool.poetry.extras]
s3 = ["fs-s3fs"]

[tool.pytest.ini_options]
filterwarnings = [
    "ignore:pkg_resources is deprecated as an API:DeprecationWarning",
    "ignore:Deprecated call to `pkg_resources.declare_namespace:DeprecationWarning",
]

[tool.mypy]
python_version = "3.9"
warn_unused_configs = true

[tool.ruff]
ignore = [
    "ANN101",  # missing-type-self
    "ANN102",  # missing-type-cls
]
select = ["ALL"]
src = ["tap_jquants"]
target-version = "py39"


[tool.ruff.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.isort]
known-first-party = ["tap_jquants"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.per-file-ignores]
"tests/*.py" = [
    "ANN201", # Missing return type annotation for public function
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "S101", # Use of assert detected
]

[build-system]
requires = ["poetry-core>=1.0.8"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
# CLI declaration
tap-jquants = 'tap_jquants.tap:TapJQuants.cli'
